// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SUSE/console-for-sap-applications/internal/consul (interfaces: Client,Catalog,Health)

// Package mock_consul is a generated GoMock package.
package mock_consul

import (
	consul "github.com/SUSE/console-for-sap-applications/internal/consul"
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Catalog mocks base method
func (m *MockClient) Catalog() consul.Catalog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Catalog")
	ret0, _ := ret[0].(consul.Catalog)
	return ret0
}

// Catalog indicates an expected call of Catalog
func (mr *MockClientMockRecorder) Catalog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catalog", reflect.TypeOf((*MockClient)(nil).Catalog))
}

// Health mocks base method
func (m *MockClient) Health() consul.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(consul.Health)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockClientMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockClient)(nil).Health))
}

// MockCatalog is a mock of Catalog interface
type MockCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogMockRecorder
}

// MockCatalogMockRecorder is the mock recorder for MockCatalog
type MockCatalogMockRecorder struct {
	mock *MockCatalog
}

// NewMockCatalog creates a new mock instance
func NewMockCatalog(ctrl *gomock.Controller) *MockCatalog {
	mock := &MockCatalog{ctrl: ctrl}
	mock.recorder = &MockCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatalog) EXPECT() *MockCatalogMockRecorder {
	return m.recorder
}

// Datacenters mocks base method
func (m *MockCatalog) Datacenters() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Datacenters")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Datacenters indicates an expected call of Datacenters
func (mr *MockCatalogMockRecorder) Datacenters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datacenters", reflect.TypeOf((*MockCatalog)(nil).Datacenters))
}

// Nodes mocks base method
func (m *MockCatalog) Nodes(arg0 *api.QueryOptions) ([]*api.Node, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes", arg0)
	ret0, _ := ret[0].([]*api.Node)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Nodes indicates an expected call of Nodes
func (mr *MockCatalogMockRecorder) Nodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockCatalog)(nil).Nodes), arg0)
}

// MockHealth is a mock of Health interface
type MockHealth struct {
	ctrl     *gomock.Controller
	recorder *MockHealthMockRecorder
}

// MockHealthMockRecorder is the mock recorder for MockHealth
type MockHealthMockRecorder struct {
	mock *MockHealth
}

// NewMockHealth creates a new mock instance
func NewMockHealth(ctrl *gomock.Controller) *MockHealth {
	mock := &MockHealth{ctrl: ctrl}
	mock.recorder = &MockHealthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealth) EXPECT() *MockHealthMockRecorder {
	return m.recorder
}

// Node mocks base method
func (m *MockHealth) Node(arg0 string, arg1 *api.QueryOptions) (api.HealthChecks, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", arg0, arg1)
	ret0, _ := ret[0].(api.HealthChecks)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Node indicates an expected call of Node
func (mr *MockHealthMockRecorder) Node(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockHealth)(nil).Node), arg0, arg1)
}

// Service mocks base method
func (m *MockHealth) Service(arg0, arg1 string, arg2 bool, arg3 *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*api.ServiceEntry)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Service indicates an expected call of Service
func (mr *MockHealthMockRecorder) Service(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockHealth)(nil).Service), arg0, arg1, arg2, arg3)
}
